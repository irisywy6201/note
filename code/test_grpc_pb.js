/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.testGrpc.testRequest', null, global);
goog.exportSymbol('proto.testGrpc.testResponse', null, global);
goog.exportSymbol('proto.testGrpc.testStreamRequest', null, global);
goog.exportSymbol('proto.testGrpc.testType', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.testGrpc.testRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.testGrpc.testRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.testGrpc.testRequest.displayName = 'proto.testGrpc.testRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.testGrpc.testRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.testGrpc.testRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.testGrpc.testRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.testGrpc.testRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    iter: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.testGrpc.testRequest}
 */
proto.testGrpc.testRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.testGrpc.testRequest;
  return proto.testGrpc.testRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.testGrpc.testRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.testGrpc.testRequest}
 */
proto.testGrpc.testRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.testGrpc.testRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.testGrpc.testRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.testGrpc.testRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.testGrpc.testRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIter();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 iter = 1;
 * @return {number}
 */
proto.testGrpc.testRequest.prototype.getIter = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.testGrpc.testRequest.prototype.setIter = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.testGrpc.testStreamRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.testGrpc.testStreamRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.testGrpc.testStreamRequest.displayName = 'proto.testGrpc.testStreamRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.testGrpc.testStreamRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.testGrpc.testStreamRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.testGrpc.testStreamRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.testGrpc.testStreamRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    iter: jspb.Message.getFieldWithDefault(msg, 1, 0),
    batchnum: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.testGrpc.testStreamRequest}
 */
proto.testGrpc.testStreamRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.testGrpc.testStreamRequest;
  return proto.testGrpc.testStreamRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.testGrpc.testStreamRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.testGrpc.testStreamRequest}
 */
proto.testGrpc.testStreamRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIter(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBatchnum(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.testGrpc.testStreamRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.testGrpc.testStreamRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.testGrpc.testStreamRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.testGrpc.testStreamRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIter();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getBatchnum();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 iter = 1;
 * @return {number}
 */
proto.testGrpc.testStreamRequest.prototype.getIter = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.testGrpc.testStreamRequest.prototype.setIter = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 batchNum = 2;
 * @return {number}
 */
proto.testGrpc.testStreamRequest.prototype.getBatchnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.testGrpc.testStreamRequest.prototype.setBatchnum = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.testGrpc.testResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.testGrpc.testResponse.repeatedFields_, null);
};
goog.inherits(proto.testGrpc.testResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.testGrpc.testResponse.displayName = 'proto.testGrpc.testResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.testGrpc.testResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.testGrpc.testResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.testGrpc.testResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.testGrpc.testResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.testGrpc.testResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    resList: jspb.Message.toObjectList(msg.getResList(),
    proto.testGrpc.testType.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.testGrpc.testResponse}
 */
proto.testGrpc.testResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.testGrpc.testResponse;
  return proto.testGrpc.testResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.testGrpc.testResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.testGrpc.testResponse}
 */
proto.testGrpc.testResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.testGrpc.testType;
      reader.readMessage(value,proto.testGrpc.testType.deserializeBinaryFromReader);
      msg.addRes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.testGrpc.testResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.testGrpc.testResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.testGrpc.testResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.testGrpc.testResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.testGrpc.testType.serializeBinaryToWriter
    );
  }
};


/**
 * repeated testType res = 1;
 * @return {!Array<!proto.testGrpc.testType>}
 */
proto.testGrpc.testResponse.prototype.getResList = function() {
  return /** @type{!Array<!proto.testGrpc.testType>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.testGrpc.testType, 1));
};


/** @param {!Array<!proto.testGrpc.testType>} value */
proto.testGrpc.testResponse.prototype.setResList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.testGrpc.testType=} opt_value
 * @param {number=} opt_index
 * @return {!proto.testGrpc.testType}
 */
proto.testGrpc.testResponse.prototype.addRes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.testGrpc.testType, opt_index);
};


proto.testGrpc.testResponse.prototype.clearResList = function() {
  this.setResList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.testGrpc.testType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.testGrpc.testType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.testGrpc.testType.displayName = 'proto.testGrpc.testType';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.testGrpc.testType.prototype.toObject = function(opt_includeInstance) {
  return proto.testGrpc.testType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.testGrpc.testType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.testGrpc.testType.toObject = function(includeInstance, msg) {
  var f, obj = {
    mattype: jspb.Message.getFieldWithDefault(msg, 1, ""),
    fabname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    chmbrendperiod: jspb.Message.getFieldWithDefault(msg, 3, 0),
    matno: jspb.Message.getFieldWithDefault(msg, 4, ""),
    indname: jspb.Message.getFieldWithDefault(msg, 5, ""),
    waferid: jspb.Message.getFieldWithDefault(msg, 6, ""),
    cntxid: jspb.Message.getFieldWithDefault(msg, 7, ""),
    usageval: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.testGrpc.testType}
 */
proto.testGrpc.testType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.testGrpc.testType;
  return proto.testGrpc.testType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.testGrpc.testType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.testGrpc.testType}
 */
proto.testGrpc.testType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMattype(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFabname(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setChmbrendperiod(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMatno(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setIndname(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setWaferid(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setCntxid(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUsageval(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.testGrpc.testType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.testGrpc.testType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.testGrpc.testType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.testGrpc.testType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMattype();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFabname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getChmbrendperiod();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getMatno();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getIndname();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getWaferid();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getCntxid();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getUsageval();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
};


/**
 * optional string matType = 1;
 * @return {string}
 */
proto.testGrpc.testType.prototype.getMattype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.testGrpc.testType.prototype.setMattype = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string fabName = 2;
 * @return {string}
 */
proto.testGrpc.testType.prototype.getFabname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.testGrpc.testType.prototype.setFabname = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint32 chmbrEndPeriod = 3;
 * @return {number}
 */
proto.testGrpc.testType.prototype.getChmbrendperiod = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.testGrpc.testType.prototype.setChmbrendperiod = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string matNo = 4;
 * @return {string}
 */
proto.testGrpc.testType.prototype.getMatno = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.testGrpc.testType.prototype.setMatno = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string indName = 5;
 * @return {string}
 */
proto.testGrpc.testType.prototype.getIndname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.testGrpc.testType.prototype.setIndname = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string waferId = 6;
 * @return {string}
 */
proto.testGrpc.testType.prototype.getWaferid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.testGrpc.testType.prototype.setWaferid = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string cntxId = 7;
 * @return {string}
 */
proto.testGrpc.testType.prototype.getCntxid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.testGrpc.testType.prototype.setCntxid = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional uint32 usageVal = 8;
 * @return {number}
 */
proto.testGrpc.testType.prototype.getUsageval = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.testGrpc.testType.prototype.setUsageval = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


goog.object.extend(exports, proto.testGrpc);
